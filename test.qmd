```{python}
import ipyleaflet as ipyl
import requests
import pandas as pd
from datetime import datetime

# Charger les données depuis l'API
url = "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_mensuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_com,nom_poll,valeur,date_debut,date_fin&outSR=4326&f=json"
response = requests.get(url)

if response.status_code == 200:
    data = response.json()
else:
    print(f"La requête a échoué avec le code d'état {response.status_code}")

# Extraire les données
records = data.get('features', [])
records_data = [record['attributes'] for record in records]
df_atmo = pd.DataFrame(records_data)

# Convertir les timestamps en objets datetime
df_atmo["date_debut"] = pd.to_datetime(df_atmo["date_debut"], unit="ms")

# Liste des villes et des polluants
villes = df_atmo["nom_com"].unique().tolist()
villes.sort()
polluants = df_atmo["nom_poll"].unique().tolist()
polluants.sort()

# Créer un nouveau DataFrame avec les résultats
df = df_atmo.groupby(['nom_com', 'nom_poll']).max().reset_index()

# Charger le GeoJSON de la région Occitanie
geojson_url = "https://france-geojson.gregoiredavid.fr/repo/regions/occitanie/communes-occitanie.geojson"
response = requests.get(geojson_url)
geojson = response.json()

# Créer la carte avec ipyleaflet
mymap = ipyl.Map(center=(43.6, 2.5), zoom=7.5)

# Ajouter une couche GeoJSON à la carte
geojson_layer = ipyl.GeoJSON(data=geojson, style={'color': 'white', 'opacity': 1, 'weight': 1.5, 'fillOpacity': 0.1})
mymap.add_layer(geojson_layer)

# Afficher la carte
mymap
```

```{python}
import requests
import pandas as pd
from datetime import datetime
import ipyleaflet as ipyl
from branca.colormap import linear

# Charger les données depuis l'API
url = "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_mensuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_com,nom_poll,valeur,date_debut,date_fin&outSR=4326&f=json"
response = requests.get(url)

if response.status_code == 200:
    data = response.json()
else:
    print(f"La requête a échoué avec le code d'état {response.status_code}")

# Extraire les données
records = data.get('features', [])
records_data = [record['attributes'] for record in records]
df_atmo = pd.DataFrame(records_data)

# Convertir les timestamps en objets datetime
df_atmo["date_debut"] = pd.to_datetime(df_atmo["date_debut"], unit="ms")

# Liste des villes et des polluants
villes = df_atmo["nom_com"].unique().tolist()
villes.sort()
polluants = df_atmo["nom_poll"].unique().tolist()
polluants.sort()

# Créer un nouveau DataFrame avec les résultats
d = dict(tuple(df_atmo.groupby('nom_poll')))
dataO3_1 = d['O3']
dataPM10_2 = d['PM10']
dataNOX_3 = d['NOX']
dataPM25_4 = d['PM2.5']
dataNO_5 = d['NO']
dataH2S_6 = d['H2S']
dataSO2_7 = d['SO2']
dataNO2_8 = d['NO2']

dataO3 = dataO3_1.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataPM10 = dataPM10_2.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNOX = dataNOX_3.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataPM25 = dataPM25_4.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNO = dataNO_5.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataH2S = dataH2S_6.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataSO2 = dataSO2_7.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNO2 = dataNO2_8.groupby(['nom_com', 'nom_poll']).max().reset_index()

# Charger le GeoJSON de la région Occitanie
geojson_url = "https://france-geojson.gregoiredavid.fr/repo/regions/occitanie/communes-occitanie.geojson"
response = requests.get(geojson_url)
geojson = response.json()

# Créer la carte avec ipyleaflet
mymap = ipyl.Map(center=(43.6, 2.5), zoom=7.5)

# Ajouter une couche GeoJSON à la carte
geojson_layer = ipyl.GeoJSON(data=geojson, style={'color': 'green', 'opacity': 1, 'weight': 1.5, 'fillOpacity': 0.1})
mymap.add_layer(geojson_layer)

# Charger les données des stations des villes dans la région Occitanie
df = pd.DataFrame(dataO3)

# Fonction pour attribuer une couleur en fonction de la valeur
def get_color(feature):
    value = df[df['nom_com'] == feature['properties']['nom']]['valeur'].iloc[0]
    return color_scale(value)

# Créer une colormap
colormap = linear.YlOrRd_04.scale(df['valeur'].min(), df['valeur'].max())

# Créer la fonction de style pour attribuer les couleurs en fonction de la valeur
def get_style(feature, colormap):
    nom_com = feature['properties']['nom']
    valeur = df[df['nom_com'] == nom_com]['valeur'].iloc[0]
    return {'fillColor': colormap(valeur), 'color': 'black', 'weight': 1, 'fillOpacity': 0.7}

# Créer la couche GeoJSON avec le style choroplèthe
geojson_layer = ipyl.GeoJSON(
    data=geojson,
    style_callback=lambda feature, **kwargs: get_style(feature, colormap)
)

# Créer la carte
mymap = ipyl.Map(center=(43.6, 2.5), zoom=7.5)

# Ajouter la couche GeoJSON à la carte
mymap.add_layer(geojson_layer)

# Ajouter la légende de la colormap
colormap.caption = 'Valeur'
mymap.add_control(ipyl.WidgetControl(widget=colormap, position='bottomright'))

# Afficher la carte
mymap




```







```{python}
import requests
import pandas as pd
import ipyleaflet as ipyl
from branca.colormap import linear

# Charger les données depuis l'API
url = "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_mensuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_com,nom_poll,valeur,date_debut,date_fin&outSR=4326&f=json"
response = requests.get(url)

if response.status_code == 200:
    data = response.json()
else:
    print(f"La requête a échoué avec le code d'état {response.status_code}")

# Extraire les données
records = data.get('features', [])
records_data = [record['attributes'] for record in records]
df_atmo = pd.DataFrame(records_data)

# Convertir les timestamps en objets datetime
df_atmo["date_debut"] = pd.to_datetime(df_atmo["date_debut"], unit="ms")

# Liste des villes et des polluants
villes = df_atmo["nom_com"].unique().tolist()
villes.sort()
polluants = df_atmo["nom_poll"].unique().tolist()
polluants.sort()

# Créer un nouveau DataFrame avec les résultats
d = dict(tuple(df_atmo.groupby('nom_poll')))
dataO3_1 = d['O3']
dataPM10_2 = d['PM10']
dataNOX_3 = d['NOX']
dataPM25_4 = d['PM2.5']
dataNO_5 = d['NO']
dataH2S_6 = d['H2S']
dataSO2_7 = d['SO2']
dataNO2_8 = d['NO2']

dataO3 = dataO3_1.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataPM10 = dataPM10_2.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNOX = dataNOX_3.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataPM25 = dataPM25_4.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNO = dataNO_5.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataH2S = dataH2S_6.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataSO2 = dataSO2_7.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNO2 = dataNO2_8.groupby(['nom_com', 'nom_poll']).max().reset_index()


# Charger les données des stations des villes dans la région Occitanie
df = pd.DataFrame(dataO3) 
df # Utilisez le DataFrame approprié ici (dataPM10, dataNOX, etc.)

# Charger le fichier GeoJSON de la région Occitanie
geojson_url = "https://france-geojson.gregoiredavid.fr/repo/regions/occitanie/communes-occitanie.geojson"
response = requests.get(geojson_url)
geojson = response.json()

# Créer la carte avec ipyleaflet
mymap = ipyl.Map(center=(43.6, 2.5), zoom=7.5)

# Créer une échelle de couleurs en fonction des valeurs de polluants
colormap = linear.YlOrRd_09.scale(df['valeur'].min(), df['valeur'].max())

# Créer une couche GeoJSON avec le style choroplèthe
geojson_layer = ipyl.GeoJSON(
    data=geojson,
    style_callback=lambda feature, **kwargs: {
        'fillColor': colormap(df[df['nom_com'] == feature['properties']['nom']]['valeur'].values[0]) if not df[df['nom_com'] == feature['properties']['nom']].empty else 'gray',
        'color': 'black',
        'weight': 1,
        'fillOpacity': 0.7
    }
)

# Ajouter la couche GeoJSON à la carte
mymap.add_layer(geojson_layer)

# Afficher la carte
mymap


```


```{python}
import requests
import pandas as pd
import ipyleaflet as ipyl
from branca.colormap import linear

# Charger les données depuis l'API
url = "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_mensuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_com,nom_poll,valeur,date_debut,date_fin&outSR=4326&f=json"
response = requests.get(url)

if response.status_code == 200:
    data = response.json()
else:
    print(f"La requête a échoué avec le code d'état {response.status_code}")

# Extraire les données
records = data.get('features', [])
records_data = [record['attributes'] for record in records]
df_atmo = pd.DataFrame(records_data)

# Convertir les timestamps en objets datetime
df_atmo["date_debut"] = pd.to_datetime(df_atmo["date_debut"], unit="ms")

# Liste des villes et des polluants
villes = df_atmo["nom_com"].unique().tolist()
villes.sort()
polluants = df_atmo["nom_poll"].unique().tolist()
polluants.sort()

# Créer un nouveau DataFrame avec les résultats
d = dict(tuple(df_atmo.groupby('nom_poll')))
dataO3_1 = d['O3']
dataPM10_2 = d['PM10']
dataNOX_3 = d['NOX']
dataPM25_4 = d['PM2.5']
dataNO_5 = d['NO']
dataH2S_6 = d['H2S']
dataSO2_7 = d['SO2']
dataNO2_8 = d['NO2']

dataO3 = dataO3_1.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataPM10 = dataPM10_2.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNOX = dataNOX_3.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataPM25 = dataPM25_4.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNO = dataNO_5.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataH2S = dataH2S_6.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataSO2 = dataSO2_7.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNO2 = dataNO2_8.groupby(['nom_com', 'nom_poll']).max().reset_index()

# Charger les données des stations des villes dans la région Occitanie
df = pd.DataFrame(dataNO2) 

# Charger le fichier GeoJSON de la région Occitanie
geojson_url = "https://france-geojson.gregoiredavid.fr/repo/regions/occitanie/communes-occitanie.geojson"
response = requests.get(geojson_url)
geojson = response.json()

# Créer une colormap en fonction des valeurs de polluants
colormap = LinearColormap(colors=['#ffffcc', '#c2e699', '#78c679', '#31a354', '#006837'], vmin=df['valeur'].min(), vmax=df['valeur'].max())

# Ajouter des polygones colorés individuels à la carte
for feature in geojson['features']:
    ville = feature['properties']['nom']
    if ville in df['nom_com'].values:
        value = df[df['nom_com'] == ville]['valeur'].values[0]
        color = rgb2hex(colormap(value))
    else:
        color = '#e5f5e0'  # Couleur pour les communes sans données
    
    geojson_layer = ipyl.GeoJSON(
        data=feature,
        style={
            'color': 'black',
            'fillColor': color,
            'weight': 1,
            'fillOpacity': 0.7
        }
    )
    
    # Ajouter la couche GeoJSON à la carte
    mymap.add_layer(geojson_layer)
# Afficher la carte
mymap
```