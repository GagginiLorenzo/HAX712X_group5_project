---
title: Occitanie Quality Air Explorer
format: html
filters:
  - shinylive
---
### Carte des stations d'Occitanie
::: {.column-page-inset}
```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
#| column: page


########toute les cartes pour polluant safiche bien, mais je n'ai pas encore fais de re-render sur l'html, 
########donc si vous voulez testez différent polluant pour le moment il faut recharger la pages entière
########,je corrige ça demain je suis dead x)



from ipywidgets import HTML, Layout
import ipyleaflet as L
import json
import random
import pandas as pd
from io import StringIO  # Importez StringIO depuis io
from shiny import App, render, ui,reactive 
from shinywidgets import output_widget, reactive_read, render_widget, register_widget
import pyodide.http
import pandas
from branca.colormap import LinearColormap, linear
from datetime import datetime
from shiny import App, Inputs, Outputs, Session, reactive, ui
polluant_atmos="'O3'","'NO2'","'NO'","'NOX'","'H2S","'PM10'","'PM2.5'","'SO2'"

app_ui = ui.page_fluid(   
    ui.input_selectize("condition1", "polluant_atmos", polluant_atmos,multiple = True),
    ui.output_text_verbatim("info1"),
    output_widget("map",height='500px')
    )

def server(input, output, session):

    @reactive.Calc
    def url1():
        cond1 = "where=(nom_poll="+ ') AND ('.join(input.condition1())+')'
        return f"https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_mensuelle_poll_princ/FeatureServer/0/query?{cond1}&outFields=nom_dept,nom_poll,valeur,date_debut,date_fin&outSR=4326&f=json"
    @reactive.Calc
    async def data1():
        response1 = await pyodide.http.pyfetch(url1())
        dat = await response1.json()
        r= dat
        return r

    @reactive.Calc
    def url2():
        return "https://france-geojson.gregoiredavid.fr/repo/regions/occitanie/departements-occitanie.geojson"
    @reactive.Calc
    async def data2():
        response1 = await pyodide.http.pyfetch(url2())
        dat1 = await response1.json()
        r= dat1
        return r

    @reactive.Calc
    async def polluant_data():
        r= await data1()
        records = r.get('features', [])
        records_data = [record['attributes'] for record in records]
        df_atmo = pd.DataFrame(records_data)
        df_atmo["date_debut"] = df_atmo["date_debut"]/1000
        df_atmo["date_debut"] = df_atmo["date_debut"].apply(
                    lambda _: datetime.utcfromtimestamp(_)
                )
        df_atmo["nom_dept"]=df_atmo["nom_dept"].str.title()
        dataO3 = df_atmo.groupby(['nom_dept']).max().reset_index()
        df = pd.DataFrame(dataO3)
        return df

    @output
    @render_widget
    async def map():
        geojson= await data2()
        df= await polluant_data()

        mymap = L.Map(center=[43.6, 1.44],zoom=7,layout=Layout(height='500px'))
        colormap= linear.YlOrRd_09.scale(df['valeur'].min(), df['valeur'].max())
        for feature in geojson['features']:
            station = df[df['nom_dept'] == feature['properties']['nom']]
            if not station.empty:
                value = station['valeur'].values[0]
                color = colormap.rgb_hex_str(value)
            else:
                color = '#e5f5e0'  # Couleur hexadécimale pour les polygones sans données
            geo_json = L.GeoJSON(
            data=feature,
            style={
                'opacity': 1, 'dashArray': '9', 'fillOpacity': 1, 'weight': 1,
                'fillColor': color
            },
            hover_style={
                'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5
            },
            
            )
            mymap.add(geo_json)
        register_widget("map", mymap)

app = App(app_ui, server)  
```
:::

::: {.column width="49%"}
### Représentation temporelle d'un polluant
```{shinylive-python}
#| standalone: true
#| viewerHeight: 1600
#| column: page
from pprint import pformat
import pyodide.http
from shiny import App, reactive, render, ui
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt

zone_atmos="nom_com='AGDE'","nom_com='ALES'","nom_com='ARGELES-GAZOST'","nom_com='AUCH'","nom_com='BELESTA-EN-LAURAGAIS'","nom_com='BESSIERES'","nom_com='BEZIERS'","nom_com='BLAGNAC'","nom_com='CORNEILHAN'","nom_com='GAUDONVILLE'","nom_com='LA CALMETTE'","nom_com='LATTES'","nom_com='LOURDES'","nom_com='LUNEL-VIEL'","nom_com='MIRAMONT-DE-COMMINGES'","nom_com='MONTGISCARD'","nom_com='MONTPELLIER'","nom_com='NIMES'","nom_com='PEYRUSSE-VIEILLE'","nom_com='SAINT-GAUDENS'","nom_com='SAINT-GIRONS'","nom_com='SAZE'","nom_com='TARBES'","nom_com='TOULOUSE'"     

polluant_atmos="'O3'","'NO2'","'NO'","'NOX'","'H2S","'PM10'","'PM2.5'","'SO2'"

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
                ui.input_selectize("selection1", "zone_atmos", zone_atmos,multiple = True),
                ui.input_selectize("condition1", "polluant", polluant_atmos, multiple = True),
                ui.input_date("date","à partir de"),
                ),
        ui.panel_main(

                    ui.output_text_verbatim("info1"),
                ),
            ),
    ui.output_plot("GRAPH_YEAR",height='1600px'), #
)

def server(input, output, session):
    def url1():
        cond1 = "where=(nom_poll="+ ') AND ('.join(input.condition1())+')'
        cond2 =  "AND ("+'AND ('.join(input.selection1())+')'
        date1= f"AND (date_debut >= '{input.date()}"+" 00:00:00' )"
        return f"https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_journaliere_poll_princ/FeatureServer/0/query?{cond1}{cond2}{date1}&outFields=nom_com,nom_station,code_station,typologie,nom_poll,valeur,date_debut,influence&outSR=4326&f=json"

    @reactive.Calc
    async def data():
        response1 = await pyodide.http.pyfetch(url1())
        dat1 = await response1.json()
        r= dat1,dat1
        return r

    @output
    @render.plot
    async def GRAPH_YEAR():
    
        #supprimer les warnings
        pd.options.mode.chained_assignment = None  # default='warn'

        response = await data()
        dat= response[1]

        records = dat.get('features', [])
        records_data = [record['attributes'] for record in records]
        df_atmo = pd.DataFrame(records_data)

        # %%
        df_atmo["date_debut"] = df_atmo["date_debut"]/1000
        df_atmo["date_debut"] = df_atmo["date_debut"].apply(
                    lambda _: datetime.utcfromtimestamp(_)
                )

        # liste des villes et des polluants
        villes = df_atmo["nom_com"].unique().tolist()
        villes.sort()
        polluants = df_atmo["nom_poll"].unique().tolist()
        polluants.sort()

        # Fonction qui trace le graphique
        def graphique(villes, polluants):
            #sélection : pas utile
            df_pv = df_atmo
            #les différentes stations
            nom_stations = df_pv["nom_station"].unique()
            nb_stations = len(nom_stations)
            
            ####cas limite 1 station
            if nb_stations == 1:
                fig, axes = plt.subplots(1, 1, figsize=(10, 25), layout="constrained")  # Créer une seule sous-figure
                axes = [axes]  # Mettre l'unique axe dans une liste
    	    else:
                fig, axes = plt.subplots(nb_stations, 1, figsize=(10, 25), sharex=True, layout="constrained")
            
            #titre général
            fig.suptitle("Pollution au " + str(polluants) + " à " + str(villes), fontsize=12)
            for i in range(nb_stations):             
                df_pvs = df_pv.loc[df_pv["nom_station"] == nom_stations[i]]
                #datetime devient index
                df_pvs = df_pvs.set_index(["date_debut"])
                #on moyennise par jour
                axes[i].plot(df_pvs["valeur"].resample("d").mean(),)
                #décorations et titre
                for label in axes[i].get_xticklabels():
                    label.set_ha("right")
                    label.set_rotation(45)
                axes[i].set_ylabel("µg/m3")
                axes[i].set_title(
                    "Concentration du " + str(polluants) + " à " + str(nom_stations[i]))
                axes[i].grid(True)
            return fig
        return graphique(villes, polluants)
    @output
    @render.text
    async def info1():
        if input.selection1() == "":
            return ""
        else:
            d=await data()
            df = d[1]
            return f"Request URL: {url1()}\nResult type: {type(d[1])}\n{df}"
app = App(app_ui, server, debug=True)

```
:::

::: {.column width="1%"}
:::


::: {.column width="49%"}
### Représentation de l'effet week-end
```{shinylive-python}
#| standalone: true
#| viewerHeight: 1600
#| column: page
from pprint import pformat
import pyodide.http
from shiny import App, reactive, render, ui
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt

zone_atmos="nom_com='AGDE'","nom_com='ALES'","nom_com='ARGELES-GAZOST'","nom_com='AUCH'","nom_com='BELESTA-EN-LAURAGAIS'","nom_com='BESSIERES'","nom_com='BEZIERS'","nom_com='BLAGNAC'","nom_com='CORNEILHAN'","nom_com='GAUDONVILLE'","nom_com='LA CALMETTE'","nom_com='LATTES'","nom_com='LOURDES'","nom_com='LUNEL-VIEL'","nom_com='MIRAMONT-DE-COMMINGES'","nom_com='MONTGISCARD'","nom_com='MONTPELLIER'","nom_com='NIMES'","nom_com='PEYRUSSE-VIEILLE'","nom_com='SAINT-GAUDENS'","nom_com='SAINT-GIRONS'","nom_com='SAZE'","nom_com='TARBES'","nom_com='TOULOUSE'"     

polluant_atmos="'O3'","'NO2'","'NO'","'NOX'","'H2S","'PM10'","'PM2.5'","'SO2'"

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
                ui.input_selectize("selection1", "zone_atmos", zone_atmos,multiple = True),
                ui.input_selectize("condition1", "polluant", polluant_atmos, multiple = True),
                ),
        ui.panel_main(

                    ui.output_text_verbatim("info1"),
                ),
            ),
    ui.output_plot("GRAPH_WEEK",height='1600px'), #
)

def server(input, output, session):
    def url2():
        cond1 = "where=(nom_poll="+ ') AND ('.join(input.condition1())+')'
        cond2 =  "AND ("+'AND ('.join(input.selection1())+')'
        return f"https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/Mesure_horaire_(30j)_Region_Occitanie_Polluants_Reglementaires_1/FeatureServer/0/query?{cond1}{cond2}&outFields=nom_com,nom_station,nom_poll,valeur,date_debut&outSR=4326&f=json"

    @reactive.Calc
    async def data():
        response2 = await pyodide.http.pyfetch(url2())
        dat2 = await response2.json()
        r = dat2,dat2
        return r

    @output
    @render.plot
    async def GRAPH_WEEK():
    
        #supprimer les warnings
        pd.options.mode.chained_assignment = None  # default='warn'

        response = await data()
        dat = response[1]

        records = dat.get('features', [])
        records_data = [record['attributes'] for record in records]
        df_atmo = pd.DataFrame(records_data)

        # datetime
        df_atmo["date_debut"] = df_atmo["date_debut"]/1000
        df_atmo["date_debut"] = df_atmo["date_debut"].apply(
                    lambda _: datetime.utcfromtimestamp(_)
                )

        # liste des villes et des polluants
        villes = df_atmo["nom_com"].unique().tolist()
        villes.sort()
        polluants = df_atmo["nom_poll"].unique().tolist()
        polluants.sort()

        # Fonction qui trace le graphique
        def graph_week(villes, polluants):
            #sélection : pas utile
            df_pv = df_atmo
            #les différentes stations
            nom_stations = df_pv["nom_station"].unique()
            nb_stations = len(nom_stations)
            
            ####cas limite 1 station
            if nb_stations == 1:
                fig, axes = plt.subplots(1, 1, figsize=(10, 25), layout="constrained")  # Créer une seule sous-figure
                axes = [axes]  # Mettre l'unique axe dans une liste
    	    else:
                fig, axes = plt.subplots(nb_stations, 1, figsize=(10, 25), sharex=True, layout="constrained")
            
            #titre général
            fig.suptitle("Pollution selon le jour de la semaine à " + str(villes), fontsize=12)
            # pour la légende
            jour = ["lundi", "mardi", "mercredi","jeudi", "vendredi", "samedi", "dimanche"]
            for i in range(nb_stations):
                # on ne garde que les données concernant la station en question             
                df_pvs = df_pv.loc[df_pv["nom_station"] == nom_stations[i]]
                #datetime devient index
                df_pvs = df_pvs.set_index(["date_debut"])
                # colonne avec le numéro des jours
                df_pvs["weekday"] = df_pvs.index.weekday        
                # on regroupe par jour et on fait la moyenne
                pollution_week = (df_pvs.groupby(["weekday", df_pvs.index.hour])["valeur"].mean().unstack(level=0))
                # labellisation et légende
                axes[i].plot(pollution_week)
                axes[i].set_xticks(np.arange(0, 24))
                axes[i].set_xticklabels(np.arange(0, 24), rotation=45)
                axes[i].set_ylabel("µg/m3")
                axes[i].set_title("Concentration du " + str(polluants) + " à " + str(nom_stations[i]))
                axes[i].legend(jour, loc="lower left", bbox_to_anchor=(1, 0.1)).set_visible(True)
                axes[i].grid(True)
            return fig
        return graph_week(villes, polluants)
    @output
    @render.text
    async def info1():
        if input.selection1() == "":
            return ""
        else:
            d=await data()
            df = d[1]
            return f"Request URL: {url2()}\nResult type: {type(d[1])}\n{df}"
app = App(app_ui, server, debug=True)

```
:::

:::

### TEST GRAPH SYNOP
::: {.column-page-inset}

```{shinylive-python}
#| standalone: true
#| viewerHeight: 1600
#| column: page

from pprint import pformat
import pyodide.http
from shiny import App, reactive, render, ui
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

choices_synop= "date", "nom", "pres", "tc", "tminsolc", "nom_dept", "nom_dept"
condition_filtres_synop = 'nom="MONTPELLIER"','year(date)="2017"'
y_synop="2022","2023"
m_synop="01","02","03","04","05","06","07","06","08","09","10","11","12"
app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_selectize("selection", "Selection_synop", choices_synop, multiple = True),
            ui.input_selectize("date1", "année", y_synop, multiple = True),
            ui.input_selectize("date2", "mois", m_synop, multiple = True),
        ),
        ui.panel_main(
            ui.output_text_verbatim("info"),
            ),
    )
)
def server(input, output, session):
    @output
    @render.text

    ###test reussi, stack est une liste de n requêtes (1 par jours), avec toute les donnée occtinanie/jours (environs 60 résultas/jours),
    ###petit exemple pour des test statiques dans code a implémenter



    async def info():
        if input.date2()==" " :
            return " "
        else:
            stack=[]
            r=[]
            select = ','.join(input.selection())
            year=','.join(input.date1())
            month=','.join(input.date2())

            ### faire les tests avec l'exrait en local pour pas se faire blacklist par l'api, on étendra une fois le graph achever ,'04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30']:
            
            for n in ['01','02','03']: 
                url=f"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/donnees-synop-essentielles-omm/records?select={select}&where=year(date)={year} and month(date)={month} and day(date)={n} and code_reg=76&limit=99"
                response = await pyodide.http.pyfetch(url)
                dat = await response.json()
                stack.append(dat)
            q=pformat(stack)
        return  f"{q}"

app = App(app_ui, server, debug=True)
```
:::
