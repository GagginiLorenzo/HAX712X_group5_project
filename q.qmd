---
title: Group 5 project
format: html
filters:
  - shinylive
---
### TEST CARTE
::: {.column-page-inset}
```{shinylive-python}
#| standalone: true
#| viewerHeight: 600
#| column: page

from ipywidgets import HTML, Layout
import ipyleaflet as L
import json
import random
import pandas as pd
from io import StringIO  # Importez StringIO depuis io
from shiny import App, render, ui,reactive
from shinywidgets import output_widget, reactive_read, render_widget, register_widget
import pyodide.http
import pandas

# Charger les données depuis le CSV
data = """nom_dept,nom_com,nom_station,x_wgs84,y_wgs84
ARIEGE,SAINT-GIRONS,St-Girons Urbain,1.13943,42.99
AVEYRON,RODEZ,Rodez - Camonil Urbain,2.5707,44.357
GARD,ALES,Ales Vauban fond,4.07548,44.1259
GARD,LA CALMETTE,La Calmette - Périurbain,4.26581,43.9254
GARD,NIMES,Nîmes - Planas - Trafic,4.36199,43.8299
GARD,NIMES,Nîmes Sud - Urbain,4.37422,43.8344
GARD,SAZE,Saze - rural,4.67969,43.9429
GERS,AUCH,AUCH ST EXUPERY,0.59467,43.6511
GERS,GAUDONVILLE,Gaudonville Rural,0.845617,43.884
GERS,PEYRUSSE-VIEILLE,Peyrusse Vieille Rural,0.179722,43.6303
HAUTE-GARONNE,BELESTA-EN-LAURAGAIS,Belesta en Lauragais Rural,1.82194,43.4414
HAUTE-GARONNE,BESSIERES,Bessières-ECONOTRE Industriel,1.59583,43.8039
HAUTE-GARONNE,BLAGNAC,Blagnac Aéroport Piste ,1.37725,43.6253
HAUTE-GARONNE,BLAGNAC,Blagnac Aéroport Trafic ,1.37572,43.6335
HAUTE-GARONNE,MIRAMONT-DE-COMMINGES,Saint Gaudens-Miramont Industriel,0.744722,43.0944
HAUTE-GARONNE,MONTGISCARD,Montgiscard Périurbain,1.57111,43.4575
HAUTE-GARONNE,SAINT-GAUDENS,Saint Gaudens-Daurat Industriel,0.718889,43.1064
HAUTE-GARONNE,TOULOUSE,Station Pedagogique,1.38541,43.597
HAUTE-GARONNE,TOULOUSE,Toulouse - Port de l Embouchure Trafic,1.41518,43.6103
HAUTE-GARONNE,TOULOUSE,Toulouse - Rte Albi Trafic,1.46765,43.6431
HAUTE-GARONNE,TOULOUSE,Toulouse-Berthelot Urbain,1.44403,43.5873
HAUTE-GARONNE,TOULOUSE,Toulouse-Jacquier Urbain,1.41807,43.5757
HAUTE-GARONNE,TOULOUSE,Toulouse-Mazades Urbain,1.43861,43.6236
HAUTE-GARONNE,TOULOUSE,Toulouse-Périphérique Trafic,1.44959,43.574
HAUTE-GARONNE,TOULOUSE,Toulouse-SETMI Chapitre Industriel,1.40392,43.5564
HAUTE-GARONNE,TOULOUSE,Toulouse-SETMI Eisenhower Industriel,1.39326,43.5616
HAUTES-PYRENEES,ARGELES-GAZOST,Argeles-Gazost,-0.0950538,43.0075
HAUTES-PYRENEES,LOURDES,Lourdes-Lapaca Urbain,-0.038889,43.0969
HAUTES-PYRENEES,TARBES,Tarbes-Dupuy Urbain,0.062222,43.2303
HERAULT,AGDE,Agathois-Piscénois - Périurbain,3.50483,43.2878
HERAULT,BEZIERS,Beziers Leclerc trafic,3.23734,43.3412
HERAULT,CORNEILHAN,Biterrois-Narbonnais - Rural,3.18881,43.4068
HERAULT,LATTES,Montpellier Sud - Périurbain,3.91156,43.5706
HERAULT,LUNEL-VIEL,Lunel-Viel - Industriel,4.08842,43.6758
HERAULT,MONTPELLIER,Montpelier Antigone Trafic,3.89574,43.6088

"""
df = pd.read_csv(StringIO(data))  # Utilisez StringIO depuis io 

app_ui = ui.page_fluid(
    output_widget("map",height='500px')
    )

def server(input, output, session):
    def u():
        return "https://france-geojson.gregoiredavid.fr/repo/regions/occitanie/departements-occitanie.geojson"
    @reactive.Calc
    async def data():
        response1 = await pyodide.http.pyfetch(u())
        dat1 = await response1.json()
        r= dat1
        return r
    @reactive.Calc
    async def weather_data():
        response = await pyodide.http.pyfetch(url())
        r =response.json()
        return r
    @output
    @render_widget
    async def map():
        # Créer une carte centrée sur la région Occitanie
        d= await data()
        m = L.Map(center=[43.6, 1.44],zoom=7,layout=Layout(height='500px'))
        for index, row in df.iterrows():
            marker=L.Marker(location=[row['y_wgs84'], row['x_wgs84']],title=f"{row['nom_station']} - {row['nom_com']}, {row['nom_dept']}")
            m.add(marker)
        geo_json = L.GeoJSON(data=d)
        m.add(geo_json)
        register_widget("map", m)

app = App(app_ui, server)  
```
:::
### TEST GRAPH ATMOS YEARS_PY
::: {.column-page-inset}

```{shinylive-python}
#| standalone: true
#| viewerHeight: 1600
#| column: page
from pprint import pformat
import pyodide.http
from shiny import App, reactive, render, ui
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

zone_atmos="nom_dept='HERAULT'","nom_com='MONTPELLIER'"
polluant_atmos="'O3'","'NO2'"

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
                ui.input_selectize("selection1", "zone_atmos", zone_atmos, multiple = True),
                ui.input_selectize("condition1", "polluant", polluant_atmos, multiple = True),
                ui.input_date("date","à partir de"),
                ),
        ui.panel_main(

                    ui.output_text_verbatim("info1"),
                ),
            ),
    ui.output_plot("GRAPH",height='800px'),
)

def server(input, output, session):
    def url1():
        cond1 = "where=(nom_poll="+ ') AND ('.join(input.condition1())+')'
        cond2 =  "AND ("+'AND ('.join(input.selection1())+')'
        date1= f"AND (date_debut >= '{input.date()}"+" 00:00:00' )"
        return f"https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_journaliere_poll_princ/FeatureServer/0/query?{cond1}{cond2}{date1}&outFields=nom_com,nom_station,code_station,typologie,nom_poll,valeur,date_debut,influence&outSR=4326&f=json"

    @reactive.Calc
    async def data():
        response1 = await pyodide.http.pyfetch(url1())
        dat1 = await response1.json()
        r= dat1,dat1
        return r

    @output
    @render.plot
    async def GRAPH():
    
        #supprimer les warnings
        pd.options.mode.chained_assignment = None  # default='warn'

        response = await data()
        dat= response[1]

        records = dat.get('features', [])
        records_data = [record['attributes'] for record in records]
        df_atmo = pd.DataFrame(records_data)

        # %%
        df_atmo["date_debut"] = df_atmo["date_debut"]/1000
        df_atmo["date_debut"] = df_atmo["date_debut"].apply(
                    lambda _: datetime.utcfromtimestamp(_)
                )
        # nettoyage df
        #df = df.drop(["date_fin", "statut_valid", "x_l93", "y_l93", "geom", "metrique"], axis=1)

        # %%
        # liste des villes et des polluants
        villes = df_atmo["nom_com"].unique().tolist()
        villes.sort()
        polluants = df_atmo["nom_poll"].unique().tolist()
        polluants.sort()

        # Fonction qui trace le graphique
        def graphique(villes, polluants):
            #sélection : pas utile
            df_pv = df_atmo
            #les différentes stations
            nom_stations = df_pv["nom_station"].unique()
            nb_stations = len(nom_stations)
            ####cas limite 1 station
            if(nb_stations==1):
                df_pvs = df_pv.loc[df_pv["nom_station"] == nom_stations[0]]
                df_pvs = df_pvs.set_index(["date_debut"])
                plt.figure(figsize=(10,5))
                f=plt.plot(df_pvs["valeur"].resample("d").mean())
                return f
            #plusieurs graphiques
            fig, axes= plt.subplots(nb_stations,sharex=True)
            #titre général
            fig.suptitle("Pollution au " + str(polluants) + " à " + str(villes), fontsize=16)
            for i in range(nb_stations):             
                df_pvs = df_pv.loc[df_pv["nom_station"] == nom_stations[i]]
                #datetime devient index
                df_pvs = df_pvs.set_index(["date_debut"])
                #on moyennise par jour
                axes[i].plot(df_pvs["valeur"].resample("d").mean(),)
                #décorations et titre
                for label in axes[i].get_xticklabels():
                    label.set_ha("right")
                    label.set_rotation(45)
                axes[i].set_ylabel("Concentration en µg/m3")
                axes[i].set_title(
                    "Concentration du " + str(polluants) + " à " + str(nom_stations[i])
                )
                axes[i].grid(True)
            return fig
        return graphique(villes, polluants)
    @output
    @render.text
    async def info1():
        if input.selection1() == "":
            return ""
        else:
            d=await data()
            df = d[1]
            return f"Request URL: {url1()}\nResult type: {type(d[1])}\n{df}"
app = App(app_ui, server, debug=True)

```
:::

