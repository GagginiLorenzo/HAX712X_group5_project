```{python}
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import requests
import geopandas as gpd
import pandas as pd
import folium
from folium.features import GeoJson
from folium import Choropleth
from branca.colormap import linear
import requests

#supprimer les warnings
pd.options.mode.chained_assignment = None  # default='warn'


url = "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_mensuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_com,nom_poll,valeur,date_debut,date_fin&outSR=4326&f=json"

response = requests.get(url)

if response.status_code == 200:
    data = response.json()
else:
    print(f"La requête a échoué avec le code d'état {response.status_code}")


#%%
records = data.get('features', [])
records_data = [record['attributes'] for record in records]
df_atmo = pd.DataFrame(records_data)

# %%
df_atmo["date_debut"] = df_atmo["date_debut"]/1000
df_atmo["date_debut"] = df_atmo["date_debut"].apply(
            lambda _: datetime.utcfromtimestamp(_)
        )
# nettoyage df
#df = df.drop(["date_fin", "statut_valid", "x_l93", "y_l93", "geom", "metrique"], axis=1)

# %%
# liste des villes et des polluants
villes = df_atmo["nom_com"].unique().tolist()
villes.sort()
polluants = df_atmo["nom_poll"].unique().tolist()
polluants.sort()
df_atmo["nom_com"]=df_atmo["nom_com"].str.title()
d= dict(tuple(df_atmo.groupby('nom_poll')))
dataO3_1 = d['O3']
dataPM10_2 = d['PM10']
dataNOX_3 = d['NOX']
dataPM25_4 = d['PM2.5']
dataNO_5 = d['NO']
dataH2S_6 = d['H2S']
dataSO2_7 = d['SO2']
dataNO2_8= d['NO2']


# Créer un nouveau DataFrame avec les résultats
dataO3 = dataO3_1.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataPM10 =dataPM10_2.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNOX = dataNOX_3.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataPM25 = dataPM25_4.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNO = dataNO_5.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataH2S = dataH2S_6.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataSO2 = dataSO2_7.groupby(['nom_com', 'nom_poll']).max().reset_index()
dataNO2 = dataNO2_8.groupby(['nom_com', 'nom_poll']).max().reset_index()

# Charger les données des stations des villes dans la région Occitanie

df = pd.DataFrame(dataO3)

# Charger le fichier GeoJSON de la région Occitanie
geojson_path = "https://france-geojson.gregoiredavid.fr/repo/regions/occitanie/communes-occitanie.geojson"

response = requests.get(geojson_path)
geojson = response.json()

# Créer la carte choroplèthe avec Folium
mymap = folium.Map(location=[43.6, 2.5], zoom_start=7.5)

# Créer une échelle de couleurs en fonction des valeurs de polluants
colormap = linear.YlOrRd_09.scale(df['valeur'].min(), df['valeur'].max())


# Créer une carte choroplèthe avec la nouvelle fonction de couleur
choropleth = Choropleth(
    geo_data=geojson_path,
    data=df,
    columns=['nom_com', 'valeur'],
    key_on='feature.properties.nom',
    #fill_color=colormap(df['valeur']),
    nan_fill_color='#FF000000',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='valeur'
)

# Ajouter le layer de choroplèthe à la carte
choropleth.add_to(mymap)

# Ajouter des polygones colorés individuels à la carte en utilisant la fonction de couleur
for feature in geojson['features']:
    station = df[df['nom_com'] == feature['properties']['nom']]
    if not station.empty:
        value = station['valeur'].values[0]
        color = colormap(value)
    else:
        color = '#e5f5e0'  # Couleur hexadécimale pour les polygones sans données
    
    folium.GeoJson(
        feature,
        style_function=lambda x, color=color: {
            'fillColor': color,
            'color': '#e5f5e0',
            'weight': 2,
            'fillOpacity': 0.7
        }
    ).add_to(mymap)



 # Affichez la carte
mymap.save('m.html')

```





