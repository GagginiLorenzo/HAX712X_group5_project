---
title: "<p style='font-size: 100px; color: #3366cc;'>Occitanie air quality explorer</p>"
author: ABCHICHE Thiziri,
        BERNARD-REYMOND Guillaume,  
        GAGGINI Lorenzo, 
        HAMOMI Majda
format: 
  revealjs:
    theme: default
    scrollable: true

---

# Table des matières
   1) Introduction
   2) Traitement des données
   3) Visualisation
   4) Déploiement
   5) Conclusion 

# Introduction

**Objectifs :** un site interactif avec :

   * une carte intéractive 
   * différents types de graphiques 
   

::: {.notes}
 un ou plusieurs graphiques simultanément décrivant l'évolution d'une valeur de polluant  ou bien donnée du climat. Tout ceci pourra être conditionné en amont par d'autres choix notamment temporels. 
:::

# Traitement des données

<center>
![](./Images/traitement.jpg){width=70%}
</center>

---

**Deux jeux de données :**

   * **Atmos** : mesures de différents polluants dans la région Occitanie. 

<center>
![](./Images/polluants.png){width=70%}
</center>

   * **Synop** : données météorologiques partout en France.



## Atmos

   * Influence des saisons ?
   * Influence des jours de la semaine ?
   * Influence des types d'émetteurs ?

<center>
![](./Images/questionnement.svg){width=40%}
</center>

---

### Variation selon les saisons ?

<center>
![](./Images/year.png){width=75%}
</center>

**Fonction de tracé :**

```{.python code-line-numbers="15-25"}
    for i in range(nb_stations):
        # on garde seulement les données de la station i
        df_pvs = df_pv.loc[df_pv["nom_station"] == nom_stations[i]]
        # transformation en datetime de date_debut
        df_pvs["date_debut"] = df_pvs["date_debut"].apply(
            lambda _: datetime.strptime(_, "%Y-%m-%d %H:%M:%S")
        )
        # datetime devient index
        df_pvs = df_pvs.set_index(["date_debut"])
        # on moyennise par jour
        axes[i].plot(df_pvs["valeur"].resample("d").mean())
```
---

### Effet week-end ?

<center>
![](./Images/week.png){height=75%}
</center>

**Fonction de tracé :**

```{.python}
# colonne avec le numéro des jours
        df_pvs["weekday"] = df_pvs.index.weekday
        # on regroupe par jour et on fait la moyenne
        pollution_week = (
            df_pvs.groupby(["weekday", df_pvs.index.hour])["valeur"]
            .mean()
            .unstack(level=0)
        )
```
---

### Influence des différents émetteurs ?

<center>
![](./Images/influ.svg)
</center>


```{.python code-line-numbers="1-3,12-16"}
pol_influ = df_atmo.groupby(['influence', 'nom_polluant'])[
    'valeur'].mean().round(1).unstack(level=0)
polluants = pol_influ.index.tolist()
```
---

<p style="font-size: 50px;"> <b> Evolution au cours du projet :</b> </p>

   * **Travail en local :** 
      - jeu de données complet en csv
      - sélection 
   * **Appel API :** 
      - package request
      - format json
   * **Intégration :** 
      - sélection dans l'appel API

# Visualisation

<center>
  <img src="./Images/im.jpg" alt="Description de l'image" style="width: 80%; height: auto;">
</center>

#
   <p style="font-size: 30px;">Visualisation des concentrations du polluant O3 dans les différentes stations de mesure de la région Occitanie.</p>

<center>
  <img src="./Images/imO3.PNG" alt="Description de l'image" style="width: 80%; height: auto;">
</center>
#

   <p style="font-size: 30px;">Analyse détaillée des niveaux de pollution en 03 au sein d'une station spécifique.</p>

<center>
  <img src="./Images/im2O3.PNG" alt="Description de l'image" style="width: 80%; height: auto;">
</center>

#
<center>
  <img src="./Images/v2.PNG" alt="Description de l'image" style="width: 80%; height: auto;">
</center>

#
<center>
  <img src="./Images/ipy.PNG" alt="Description de l'image" style="width: 100%; height: auto;">
</center>
# Déploiement 

<img src="./Images/api.png" style="width: 80%; height: auto;">

## ShinyLive

   * Solution qui respecte les contraintes du projet : documentée et supportée comme extension de quarto

## ShinyLive

   * Solution qui respecte les contraintes du projet : documentée et supportée comme extension de quarto

   * Satisfait aux ambitions dynamiques du projet

## ShinyLive

   * Solution qui respecte les contraintes du projet : documentée et supportée comme extension de quarto

   * Satisfait aux ambitions dynamiques du projet

   * Permet une interactivité totale entre les modules

<center>
![](./Images/shiny.png){width=90%}
</center>

## Le flot de données

   * **La proposition :** Communiquer avec des bases de données et exécuter du code Python depuis une page web statique déployée sur Github.

## Le flot de données
   * **La proposition :** Communiquer avec des bases de données et exécuter du code Python depuis une page web statique déployée sur Github.

   * **Objectif :** Etablir un flot de données entre les bases de données et une Ghitub-page

## Le flot de données

   * **La proposition :** Communiquer avec des bases de données et exécuter du code Python depuis une page web statique déployée sur Github.

   * **Objectif :** Etablir un flot de données entre les bases de données et une Ghitub-page

   * **Enjeux :** page web hébergée sur un serveur statique : contraintes techniques

<center>
![](./Images/flow.svg){width=75%}
</center>



 
